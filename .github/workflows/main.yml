name: 'publish'

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # - platform: 'macos-latest' # for Arm based macs (M1 and above).
          #   args: '--target aarch64-apple-darwin'
          # - platform: 'macos-latest' # for Intel based macs.
          #   args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          # - platform: 'windows-latest'
          #   args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout source code from private repo
        uses: actions/checkout@v4
        with:
          repository: git@github.com:bharattech/nvme-z-app.git
          token: ${{ secrets.PAT_TOKEN }} # ensure you have a PAT stored as PAT_TOKEN in your repository secrets

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            librsvg2-dev \
            patchelf \
            build-essential \
            curl \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            dpkg \
            python3 \
            gcc \
            pkg-config \
            libopenblas-dev \
            liblapack-dev \
            gfortran \
            libudev-dev \
            zlib1g-dev \
            libsystemd-dev
      # - name: Setup pnpm
      #   uses: pnpm/action-setup@v2
      #   with:
      #     version: latest

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm' # Set this to npm, yarn or pnpm.

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      # - name: Download model file
      #   run: | 
      #     sudo mkdir -p ./src-tauri/models
      #     sudo curl -L -o ./src-tauri/models/Phi-3-mini-4k-instruct-q4.gguf "https://huggingface.co/microsoft/Phi-3-mini-4k-instruct-gguf/resolve/main/Phi-3-mini-4k-instruct-q4.gguf?download=true"

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: npm install # change this to npm or yarn depending on which one you use.

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SIGN: 1
          # Ensure SIGN_KEY is defined in your repository secrets or remove/comment this line if not needed
          SIGN_KEY: ${{ secrets.SIGN_KEY }}
          APPIMAGETOOL_SIGN_PASSPHRASE: ${{ secrets.APPIMAGETOOL_SIGN_PASSPHRASE }}
          APPIMAGETOOL_FORCE_SIGN: 1
        with:
          tagName: nvme-z___VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          files: |
            src-tauri/target/release/bundle/deb/*.deb
          releaseName: 'nvme-z __VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}